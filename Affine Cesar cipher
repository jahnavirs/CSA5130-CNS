from math import gcd

# Find modular inverse of a under mod m
def mod_inverse(a, m):
    for x in range(1, m):
        if (a * x) % m == 1:
            return x
    return None

# Encryption function
def affine_encrypt(text, a, b):
    if gcd(a, 26) != 1:
        raise ValueError("Key 'a' must be coprime with 26 for a valid cipher.")
    result = ''
    for char in text.upper():
        if char.isalpha():
            p = ord(char) - ord('A')
            c = (a * p + b) % 26
            result += chr(c + ord('A'))
        else:
            result += char
    return result

# Decryption function
def affine_decrypt(cipher, a, b):
    a_inv = mod_inverse(a, 26)
    if a_inv is None:
        raise ValueError("Modular inverse of 'a' does not exist. Choose a coprime with 26.")
    result = ''
    for char in cipher.upper():
        if char.isalpha():
            c = ord(char) - ord('A')
            p = (a_inv * (c - b)) % 26
            result += chr(p + ord('A'))
        else:
            result += char
    return result

# Example usage
plaintext = "AFFINECIPHER"
a = 5  # Must be coprime with 26
b = 8

ciphertext = affine_encrypt(plaintext, a, b)
decrypted = affine_decrypt(ciphertext, a, b)

# Output
print("Plaintext :", plaintext)
print("Encrypted :", ciphertext)
print("Decrypted :", decrypted)
