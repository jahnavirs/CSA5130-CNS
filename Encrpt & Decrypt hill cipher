import numpy as np

def clean(t): return ''.join(c for c in t.lower() if c.isalpha())
def l2n(c): return ord(c) - ord('a')
def n2l(n): return chr(n % 26 + ord('a'))
def chunk(t): return [t[i:i+2] for i in range(0, len(t)+(len(t)%2), 2)]

def modinv(a, m=26):
    for i in range(1, m):
        if (a * i) % m == 1: return i

def hill(t, key, enc=True):
    t = clean(t)
    if len(t) % 2: t += 'x'
    mat = key if enc else (modinv(int(np.round(np.linalg.det(key))) % 26) *
        np.array([[key[1][1], -key[0][1]], [-key[1][0], key[0][0]]])) % 26
    return ''.join(n2l(int(np.dot(mat, [[l2n(p[0])], [l2n(p[1])]])[0]%26)) +
                   n2l(int(np.dot(mat, [[l2n(p[0])], [l2n(p[1])]])[1]%26)) for p in chunk(t))

# Key matrix
K = np.array([[9, 4], [5, 7]])

pt = "meet me at the usual place at ten rather than eight oclock"
ct = hill(pt, K, enc=True)
dt = hill(ct, K, enc=False)

print("Ciphertext:", ct)
print("Decrypted :", dt)
