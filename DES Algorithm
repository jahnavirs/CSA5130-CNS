# Short DES decryption key generation simulation
def left_shift(bits, n):
    return bits[n:] + bits[:n]

# PC-1 permutation table (56 bits)
PC1 = [57,49,41,33,25,17,9,
       1,58,50,42,34,26,18,
       10,2,59,51,43,35,27,
       19,11,3,60,52,44,36,
       63,55,47,39,31,23,15,
       7,62,54,46,38,30,22,
       14,6,61,53,45,37,29,
       21,13,5,28,20,12,4]

# PC-2 permutation table (48 bits)
PC2 = [14,17,11,24,1,5,
       3,28,15,6,21,10,
       23,19,12,4,26,8,
       16,7,27,20,13,2,
       41,52,31,37,47,55,
       30,40,51,45,33,48,
       44,49,39,56,34,53,
       46,42,50,36,29,32]

# Shift schedule for 16 rounds
shift_schedule = [1, 1, 2, 2, 2, 2, 2, 2, 
                  1, 2, 2, 2, 2, 2, 2, 1]

def generate_subkeys_for_decryption(key64):
    # Apply PC-1 to get 56-bit key
    key56 = ''.join([key64[i - 1] for i in PC1])

    # Split into C and D
    C = key56[:28]
    D = key56[28:]

    subkeys = []

    # Generate 16 subkeys
    for shift in shift_schedule:
        C = left_shift(C, shift)
        D = left_shift(D, shift)
        combined = C + D
        subkey = ''.join([combined[i - 1] for i in PC2])
        subkeys.append(subkey)

    # Reverse subkeys for decryption
    subkeys.reverse()

    return subkeys

# === Example Run ===
key64 = '0001001100110100010101110111100110011011101111001101111111110001'
decryption_keys = generate_subkeys_for_decryption(key64)

# Print keys K16 to K1
for i, k in enumerate(decryption_keys, 1):
    print(f"K{17 - i}: {k}")
